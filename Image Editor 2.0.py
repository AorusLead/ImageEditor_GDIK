import tkinter as tk
from tkinter import filedialog, messagebox, Menu, Scale, HORIZONTAL
from PIL import Image, ImageTk, ImageEnhance, ImageOps
import numpy as np
import os
import time
import ttkbootstrap as ttk
from ttkbootstrap.constants import *
from ttkbootstrap import utility


class PhotoEditor:
    def __init__(self, root):

        self.root = root
        self.root.title("Image Editor")
        self.root.geometry("1000x750")
        self.root.minsize(900, 650)
        self.root.configure(bg="#f5f5f5")
        self.image = None
        self.img_display = None
        self.original_image = None
        self.slider_window = None
        self.edit_history = []
        self.max_history = 7
        self.current_preview = None

        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ttk.Frame(root)
        main_container.pack(fill=tk.BOTH, expand=True, padx=15, pady=15)

        # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        tool_frame = ttk.LabelFrame(main_container, text="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", padding=10, bootstyle="info")
        tool_frame.pack(side=tk.TOP, fill=tk.X, pady=(0, 10))

        # –°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        primary_style = {"bootstyle": "primary-outline", "width": 10}
        secondary_style = {"bootstyle": "secondary-outline", "width": 10}
        accent_style = {"bootstyle": "success-outline", "width": 10}

        # –ì—Ä—É–ø–ø—ã –∫–Ω–æ–ø–æ–∫
        file_btns = [
            ("–û—Ç–∫—Ä—ã—Ç—å", self.open_image, primary_style, "üìÇ"),
            ("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", self.save_image, primary_style, "üíæ")
        ]

        adjust_btns = [
            ("–Ø—Ä–∫–æ—Å—Ç—å", self.brightness, secondary_style, "‚òÄÔ∏è"),
            ("–ö–æ–Ω—Ç—Ä–∞—Å—Ç", self.contrast, secondary_style, "‚óê"),
            ("–ì–∞–º–º–∞", self.gamma_correction, secondary_style, "Œ≥"),
            ("–ß/–ë", self.to_grayscale, secondary_style, "‚ö´")
        ]

        effect_btns = [
            ("–†–µ–∑–∫–æ—Å—Ç—å", self.sharpen, accent_style, "üîç"),
            ("–®—É–º", self.add_noise, accent_style, "‚ú®"),
            ("–°—Ç–µ–∫–ª–æ", self.glass_effect, accent_style, "üîÆ"),
            ("–í–æ–ª–Ω–∞", self.wave_effect, accent_style, "üåä")
        ]

        transform_btns = [
            ("–ü–æ–≤–µ—Ä–Ω—É—Ç—å", self.rotate, accent_style, "üîÑ"),
            ("–û–±—Ä–µ–∑–∞—Ç—å", self.crop, accent_style, "‚úÇÔ∏è"),
            ("–ó–µ—Ä–∫–∞–ª–æ", self.mirror, accent_style, "ü™û"),
            ("–°–±—Ä–æ—Å", self.reset, accent_style, "üîÑ")
        ]

        history_btns = [
            ("–û—Ç–º–µ–Ω–∏—Ç—å", self.undo, primary_style, "‚è™"),
            ("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", self.redo, primary_style, "‚è©")
        ]

        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º—ã –¥–ª—è –≥—Ä—É–ø–ø –∫–Ω–æ–ø–æ–∫
        groups = [
            ("–§–∞–π–ª", file_btns),
            ("–ö–æ—Ä—Ä–µ–∫—Ü–∏—è", adjust_btns),
            ("–≠—Ñ—Ñ–µ–∫—Ç—ã", effect_btns),
            ("–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è", transform_btns),
            ("–ò—Å—Ç–æ—Ä–∏—è", history_btns)
        ]

        for group_name, buttons in groups:
            group_frame = ttk.Frame(tool_frame)
            group_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5)

            ttk.Label(group_frame, text=group_name, font=("Helvetica", 9, "bold")).pack(pady=(0, 5))

            for text, command, style, icon in buttons:
                btn = ttk.Button(
                    group_frame,
                    text=f"{icon} {text}",
                    command=command,
                    **style
                )
                btn.pack(side=tk.TOP, fill=tk.X, pady=2)

        # –û–±–ª–∞—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
        img_frame = ttk.Frame(main_container)
        img_frame.pack(fill=tk.BOTH, expand=True, pady=5)

        # Canvas —Å —Ç–µ–Ω—è–º–∏ –∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏
        self.canvas_container = ttk.Frame(
            img_frame,
            relief="groove",
            borderwidth=2,
            bootstyle="light"
        )
        self.canvas_container.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)

        self.canvas = tk.Canvas(self.canvas_container, background="#ffffff", highlightthickness=0)
        self.canvas.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)

        # –°—Ç–∞—Ç—É—Å –±–∞—Ä —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        status_frame = ttk.Frame(main_container, height=25)
        status_frame.pack(side=tk.BOTTOM, fill=tk.X, pady=(10, 0))

        self.status_var = tk.StringVar()
        self.status_var.set("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

        status_bar = ttk.Label(
            status_frame,
            textvariable=self.status_var,
            anchor="w",
            padding=(10, 0),
            bootstyle="inverse-light"
        )
        status_bar.pack(fill=tk.X)

        # –ú–µ–Ω—é —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏
        menu = Menu(self.root)
        self.root.config(menu=menu)

        # –ú–µ–Ω—é "–§–∞–π–ª"
        file_menu = Menu(menu, tearoff=0)
        menu.add_cascade(label="–§–∞–π–ª", menu=file_menu)
        file_menu.add_command(label="–û—Ç–∫—Ä—ã—Ç—å...", command=self.open_image, accelerator="Ctrl+O")
        file_menu.add_command(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.save_image, accelerator="Ctrl+S")
        file_menu.add_separator()
        file_menu.add_command(label="–í—ã—Ö–æ–¥", command=root.quit, accelerator="Alt+F4")

        # –ú–µ–Ω—é "–ü—Ä–∞–≤–∫–∞"
        edit_menu = Menu(menu, tearoff=0)
        menu.add_cascade(label="–ü—Ä–∞–≤–∫–∞", menu=edit_menu)
        edit_menu.add_command(label="–û—Ç–º–µ–Ω–∏—Ç—å", command=self.undo, accelerator="Ctrl+Z")
        edit_menu.add_command(label="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", command=self.redo, accelerator="Ctrl+Y")
        edit_menu.add_separator()
        edit_menu.add_command(label="–°–±—Ä–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", command=self.reset)

        # –ú–µ–Ω—é "–°–ø—Ä–∞–≤–∫–∞"
        info_menu = Menu(menu, tearoff=0)
        menu.add_cascade(label="–°–ø—Ä–∞–≤–∫–∞", menu=info_menu)
        info_menu.add_command(label="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", command=self.about)
        info_menu.add_command(label="–ö–æ–Ω—Ç–∞–∫—Ç—ã", command=self.contacts)
        info_menu.add_command(label="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", command=self.license)

        # –ü—Ä–∏–≤—è–∑–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
        root.bind("<Control-o>", lambda e: self.open_image())
        root.bind("<Control-s>", lambda e: self.save_image())
        root.bind("<Control-z>", lambda e: self.undo())
        root.bind("<Control-y>", lambda e: self.redo())

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        self.history_index = -1

    def update_status(self, message):
        self.status_var.set(message)
        self.root.update_idletasks()

    def open_slider_window(self, title, minval, maxval, default, resolution, command, second_slider=None):
        if not self.image:
            messagebox.showwarning("–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")
            return

        # –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–∫–Ω–æ —Å–ª–∞–π–¥–µ—Ä–∞
        if self.slider_window and tk.Toplevel.winfo_exists(self.slider_window):
            self.slider_window.destroy()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.push_history()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–∞
        self.slider_base_image = self.image.copy()

        self.slider_window = ttk.Toplevel(self.root)
        self.slider_window.title(title)
        self.slider_window.geometry("400x300")
        self.slider_window.resizable(False, False)
        self.slider_window.grab_set()
        self.slider_window.protocol("WM_DELETE_WINDOW", lambda: self.close_slider_window(apply=False))

        # –°—Ç–∏–ª—å –¥–ª—è –æ–∫–Ω–∞
        style = ttk.Style()
        style.configure('Slider.TFrame', background="#f0f0f0")

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(self.slider_window, padding=15, style='Slider.TFrame')
        main_frame.pack(fill=tk.BOTH, expand=True)

        # –û—Å–Ω–æ–≤–Ω–æ–π —Å–ª–∞–π–¥–µ—Ä
        slider_frame = ttk.Frame(main_frame)
        slider_frame.pack(fill=tk.X, pady=5)

        ttk.Label(slider_frame, text=title.split(':')[0], font=("Helvetica", 10, "bold")).pack(anchor="w")

        value_frame = ttk.Frame(slider_frame)
        value_frame.pack(fill=tk.X, pady=(5, 0))

        # –£–î–ê–õ–ï–ù–û: –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–∞–π–¥–µ—Ä–∞ –∑–¥–µ—Å—å (–ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ)
        # –û—Å—Ç–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω–∏–µ StringVar
        self.value_var1 = tk.StringVar(value=f"{default:.2f}")

        # –í—Ç–æ—Ä–æ–π —Å–ª–∞–π–¥–µ—Ä
        self.second_scale = None
        self.value_var2 = None
        if second_slider:
            slider_frame2 = ttk.Frame(main_frame)
            slider_frame2.pack(fill=tk.X, pady=10)

            ttk.Label(slider_frame2, text=second_slider['label'], font=("Helvetica", 10, "bold")).pack(anchor="w")

            value_frame2 = ttk.Frame(slider_frame2)
            value_frame2.pack(fill=tk.X, pady=(5, 0))

            self.second_scale = ttk.Scale(
                value_frame2,
                from_=second_slider['min'],
                to=second_slider['max'],
                orient=HORIZONTAL,
                length=300,
                bootstyle="info"
            )
            self.second_scale.set(second_slider['default'])
            self.second_scale.pack(side=tk.LEFT, expand=True)

            self.value_var2 = tk.StringVar(value=f"{second_slider['default']:.2f}")
            ttk.Label(value_frame2, textvariable=self.value_var2, width=5).pack(side=tk.RIGHT, padx=5)

        # –ö–Ω–æ–ø–∫–∏
        btn_frame = ttk.Frame(main_frame)
        btn_frame.pack(pady=15)

        btn_cancel = ttk.Button(
            btn_frame,
            text="–û—Ç–º–µ–Ω–∞",
            bootstyle="danger-outline",
            width=12,
            command=lambda: self.close_slider_window(apply=False)
        )
        btn_cancel.grid(row=0, column=0, padx=10)

        btn_apply = ttk.Button(
            btn_frame,
            text="–ü—Ä–∏–º–µ–Ω–∏—Ç—å",
            bootstyle="success",
            width=12,
            command=lambda: self.close_slider_window(apply=True)
        )
        btn_apply.grid(row=0, column=1, padx=10)

        # –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        def on_change(value):
            start_time = time.time()
            img_copy = self.slider_base_image.copy()

            if self.second_scale:
                result = command(img_copy, float(self.current_scale.get()), float(self.second_scale.get()))
                if self.value_var2:
                    self.value_var2.set(f"{self.second_scale.get():.2f}")
            else:
                result = command(img_copy, float(self.current_scale.get()))

            self.value_var1.set(f"{self.current_scale.get():.2f}")

            if result:
                self.image = result
                self.show_preview()
                elapsed = (time.time() - start_time) * 1000
                self.update_status(f"{title.split(':')[0]}: {self.value_var1.get()} | –í—Ä–µ–º—è: {elapsed:.1f} –º—Å")

        # –°–û–ó–î–ê–ï–ú –°–õ–ê–ô–î–ï–† –ü–û–°–õ–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø on_change
        self.current_scale = ttk.Scale(
            value_frame,
            from_=minval,
            to=maxval,
            orient=HORIZONTAL,
            length=300,
            bootstyle="info",
            command=lambda val: on_change(float(val))
        )
        self.current_scale.set(default)
        self.current_scale.pack(side=tk.LEFT, expand=True)

        # –î–æ–±–∞–≤–ª—è–µ–º Label –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–∞–π–¥–µ—Ä–∞
        ttk.Label(value_frame, textvariable=self.value_var1, width=5).pack(side=tk.RIGHT, padx=5)

        # –ü—Ä–∏–≤—è–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π
        self.current_scale.bind("<B1-Motion>", lambda e: on_change(self.current_scale.get()))
        self.current_scale.bind("<ButtonRelease-1>", lambda e: on_change(self.current_scale.get()))

        if self.second_scale:
            self.second_scale.bind("<B1-Motion>", lambda e: on_change(self.second_scale.get()))
            self.second_scale.bind("<ButtonRelease-1>", lambda e: on_change(self.second_scale.get()))

        # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        on_change(default)

    def close_slider_window(self, apply=True):
        if not apply:
            # –û—Ç–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self.undo()

        if self.slider_window:
            self.slider_window.destroy()
            self.slider_window = None
            self.update_status("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

    def push_history(self):
        if self.image:
            # –û–±—Ä–µ–∑–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
            if self.history_index < len(self.edit_history) - 1:
                self.edit_history = self.edit_history[:self.history_index + 1]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –∏–∑–º–µ–Ω–µ–Ω–∏–π
            if len(self.edit_history) >= self.max_history:
                self.edit_history.pop(0)

            self.edit_history.append(self.image.copy())
            self.history_index = len(self.edit_history) - 1

    def undo(self):
        if self.history_index > 0:
            self.history_index -= 1
            self.image = self.edit_history[self.history_index].copy()
            self.show_preview()
            self.update_status(f"–û—Ç–º–µ–Ω–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ {len(self.edit_history) - self.history_index}")
        elif self.original_image:
            self.image = self.original_image.copy()
            self.show_preview()
            self.update_status("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

    def redo(self):
        if self.history_index < len(self.edit_history) - 1:
            self.history_index += 1
            self.image = self.edit_history[self.history_index].copy()
            self.show_preview()
            self.update_status(f"–ü–æ–≤—Ç–æ—Ä–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ {self.history_index + 1}")

    def open_image(self):
        path = filedialog.askopenfilename(filetypes=[
            ("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.jpg *.jpeg *.png *.bmp *.gif"),
            ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
        ])
        if path:
            if os.path.getsize(path) > 64 * 1024 * 1024:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç 64 –ú–ë")
                return
            try:
                self.image = Image.open(path)
                self.original_image = self.image.copy()
                self.edit_history = [self.image.copy()]
                self.history_index = 0
                self.show_preview()
                self.update_status(
                    f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {os.path.basename(path)} | –†–∞–∑–º–µ—Ä: {self.image.size[0]}x{self.image.size[1]} | –§–æ—Ä–º–∞—Ç: {self.image.format} | –í–µ—Å:  {int(os.path.getsize(path)/1024)}" +" –ö–ë")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n{str(e)}")

    def save_image(self):
        if self.image:
            path = filedialog.asksaveasfilename(
                defaultextension=".png",
                filetypes=[
                    ("PNG", "*.png"),
                    ("JPEG", "*.jpg"),
                    ("BMP", "*.bmp"),
                    ("GIF", "*.gif"),
                    ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
                ])
            if path:
                try:
                    format = os.path.splitext(path)[1][1:].upper()
                    if format == "JPG": format = "JPEG"

                    self.image.save(path, format=format)
                    messagebox.showinfo("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
                    self.update_status(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {os.path.basename(path)} | –§–æ—Ä–º–∞—Ç: {format}")
                except Exception as e:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n{str(e)}")

    def show_preview(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π"""
        if self.image:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            preview = self.image.copy()

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            container_width = self.canvas_container.winfo_width() - 20
            container_height = self.canvas_container.winfo_height() - 20

            if container_width < 10 or container_height < 10:
                container_width, container_height = 700, 500

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
            w, h = preview.size
            ratio = min(container_width / w, container_height / h)
            new_size = (int(w * ratio), int(h * ratio))

            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
            preview = preview.resize(new_size, Image.LANCZOS)

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º
            self.img_display = ImageTk.PhotoImage(preview)
            self.canvas.delete("all")
            canvas_width = self.canvas.winfo_width()
            canvas_height = self.canvas.winfo_height()
            x = (canvas_width - preview.width) // 2
            y = (canvas_height - preview.height) // 2
            self.canvas.create_image(x, y, image=self.img_display, anchor=tk.NW)
            self.canvas.image = self.img_display

    def brightness(self):
        self.open_slider_window("–Ø—Ä–∫–æ—Å—Ç—å", 0.1, 3.0, 1.0, 0.1, self.apply_brightness)

    def apply_brightness(self, img, factor):
        enhancer = ImageEnhance.Brightness(img)
        return enhancer.enhance(factor)

    def contrast(self):
        self.open_slider_window("–ö–æ–Ω—Ç—Ä–∞—Å—Ç", 0.1, 3.0, 1.0, 0.1, self.apply_contrast)

    def apply_contrast(self, img, factor):
        enhancer = ImageEnhance.Contrast(img)
        return enhancer.enhance(factor)

    def sharpen(self):
        self.open_slider_window("–†–µ–∑–∫–æ—Å—Ç—å", 0.1, 3.0, 1.0, 0.1, self.apply_sharpen)

    def apply_sharpen(self, img, factor):
        enhancer = ImageEnhance.Sharpness(img)
        return enhancer.enhance(factor)

    def gamma_correction(self):
        self.open_slider_window("–ì–∞–º–º–∞-–∫–æ—Ä—Ä–µ–∫—Ü–∏—è", 0.1, 5.0, 1.0, 0.1, self.apply_gamma)

    def apply_gamma(self, img, gamma):
        if gamma <= 0:
            return img
        lut = [pow(i / 255.0, gamma) * 255 for i in range(256)]
        lut = list(map(int, lut)) * (3 if img.mode == 'RGB' else 1)
        return img.point(lut)

    def to_grayscale(self):
        if self.image:
            self.push_history()
            self.image = self.image.convert("L").convert("RGB")
            self.show_preview()
            self.update_status("–ü—Ä–∏–º–µ–Ω–µ–Ω–æ: –ß–µ—Ä–Ω–æ-–±–µ–ª—ã–π —Ñ–∏–ª—å—Ç—Ä")

    def add_noise(self):
        self.open_slider_window("–®—É–º", 0.0, 0.5, 0.1, 0.01, self.apply_noise)

    def apply_noise(self, img, factor):
        np_img = np.array(img).astype(np.float32)
        noise = np.random.normal(0, 255 * factor, np_img.shape)
        noisy_img = np.clip(np_img + noise, 0, 255).astype(np.uint8)
        return Image.fromarray(noisy_img)

    def glass_effect(self):
        self.open_slider_window("–≠—Ñ—Ñ–µ–∫—Ç —Å—Ç–µ–∫–ª–∞", 1, 10, 3, 1, self.apply_glass)

    def apply_glass(self, img, radius):
        np_img = np.array(img)
        output = np.zeros_like(np_img)
        height, width = np_img.shape[:2]

        for y in range(height):
            for x in range(width):
                dx = int(x + np.random.uniform(-radius, radius))
                dy = int(y + np.random.uniform(-radius, radius))
                if 0 <= dx < width and 0 <= dy < height:
                    output[y, x] = np_img[dy, dx]
                else:
                    output[y, x] = np_img[y, x]
        return Image.fromarray(output)

    def wave_effect(self):
        self.open_slider_window("–≠—Ñ—Ñ–µ–∫—Ç –≤–æ–ª–Ω—ã", 5, 30, 10, 1, self.apply_wave)

    def apply_wave(self, img, factor):
        np_img = np.array(img)
        output = np.zeros_like(np_img)
        height, width = np_img.shape[:2]
        for y in range(height):
            offset = int(factor * np.sin(2 * np.pi * y / 64))
            for x in range(width):
                nx = x + offset
                if 0 <= nx < width:
                    output[y, x] = np_img[y, nx]
                else:
                    output[y, x] = np_img[y, x]
        return Image.fromarray(output)

    def rotate(self):
        if self.image:
            self.push_history()
            self.image = self.image.rotate(90, expand=True)
            self.show_preview()
            self.update_status("–ü–æ–≤–µ—Ä–Ω—É—Ç–æ –Ω–∞ 90¬∞")

    def mirror(self):
        if self.image:
            self.push_history()
            self.image = ImageOps.mirror(self.image)
            self.show_preview()
            self.update_status("–ó–µ—Ä–∫–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ")

    def crop(self):
        if self.image:
            self.push_history()
            width, height = self.image.size
            new_width, new_height = width // 2, height // 2
            left = (width - new_width) // 2
            top = (height - new_height) // 2
            right = (width + new_width) // 2
            bottom = (height + new_height) // 2
            self.image = self.image.crop((left, top, right, bottom))
            self.show_preview()
            self.update_status("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ")

    def reset(self):
        if self.original_image:
            self.image = self.original_image.copy()
            self.edit_history = [self.image.copy()]
            self.history_index = 0
            self.show_preview()
            self.update_status("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É")

    def about(self):
        messagebox.showinfo("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ",
                            "ProImage Editor\n–í–µ—Ä—Å–∏—è 2.0\n\n–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n—Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º\n\n¬© 2025")

    def contacts(self):
        messagebox.showinfo("–ö–æ–Ω—Ç–∞–∫—Ç—ã",
                            "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: –ì—Ä—É–ø–ø–∞ –ü–ò-23–±\n–ö–∏—Ä–∏–ª–ª –ò–ª—å–∏–Ω\n–î–º–∏—Ç—Ä–∏–π –•–∞—Ä—á–µ–Ω–∫–æ\n–†—É—Å—Ç–∞–º –ó—Ä–æ–∂–µ–≤—Å–∫–∏–π\n–ö–∏—Ä–∏–ª–ª –§–∞–¥–µ–µ–≤\n–ë–æ–≥–¥–∞–Ω –ó–∏–º–∏–Ω\n"
                            "Email: aorus.lord@yandex.com\n"
                            "–¢–µ–ª–µ—Ñ–æ–Ω: +7 (949) 638-25-50\n\n"
                            "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: vk/@dmitry_order")

    def license(self):
        messagebox.showinfo("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ",
                            "–õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ Image Editor\n\n"
                            "1. –†–∞–∑—Ä–µ—à–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è –ª–∏—á–Ω—ã—Ö –∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö —Ü–µ–ª–µ–π\n"
                            "2. –ó–∞–ø—Ä–µ—â–µ–Ω–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–∞–≤–æ–æ–±–ª–∞–¥–∞—Ç–µ–ª—è\n"
                            "3. –ì–∞—Ä–∞–Ω—Ç–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è\n"
                            "4. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–µ—Ç –∫–æ–Ω–µ—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")


if __name__ == "__main__":
    root = ttk.Window(themename="minty")  # —Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞ –æ—Ç ttkbootstrap
    app = PhotoEditor(root)
    root.mainloop()







    #
    #   –°–ü–ê–°–ò–ë–û –ó–ê –í–ù–ò–ú–ê–ù–ò–ï
    #










